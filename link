https://laodong.vn/the-gioi/thoi-diem-chinh-thuc-cong-bo-ket-qua-bau-cu-tong-thong-my-851456.ldo




https://howtodoinjava.com/spring-boot2/rest/enableasync-async-controller/
https://spring.io/guides/gs/async-method/#:~:text=The%20%40EnableAsync%20annotation%20switches%20on,name%20for%20which%20Spring%20searches.

Nhìn thấy bên trái không có đỉnh, thì có thể đã quá tăng, tạm thời đứng ngoài, ngó luôn MACD kẻo có phân kỳ, hội tụ
Nhận biết đưuòng giá đang trong giai đoạn nào

https://medium.com/@joeclever/using-multiple-datasources-with-spring-boot-and-spring-data-6430b00c02e7

https://www.logicbig.com/how-to/code-snippets/jcode-spring-framework-threadpooltaskexecutor.html


Error: Unable to acquire JDBC Connection
Answer:
Sounds to me like an issue with your transaction boundaries, which aren't releasing the connections back to the pool. 
Could you try putting @Transactional on your LogRepositoryImpl class?
```
    @Repository
    @Transactional
    public class LogRepositoryImpl implements LogRepository {
        . . . 
    }
```
Phải sử dụng annotation @Transactional để khi có Exception thì nó sẽ rollback và đóng connection
Còn nếu không sử dụng @Transactional thì khi có exception nó sẽ không callback mà còn GIỮ LUÔN connection ở trong pool và sẽ không còn connection Nhàn Rỗi cho 1 request khác
    tới database, đâm ra sẽ bị timeout connection khác.
Ví dụ: hãy viết 1 Store Procedure và dung Hiraki làm 1 pull, mình sẽ có 1 for loop để request tới Database để gọi store đó để quăng ra exception
       Test 1: theo kiểu lần 1 để @Transactional và xem kết quả
       Test 2: không để @Transactional và xem kết quả là: nếu connection pool là 20 thì nó sẽ loop 20 lần có quăng ra exeption và giữ luôn connection đó và không đóng
               nên từ vòng lặp thứ 21 sẽ bị timeout do đầy connection rồi. Các khắc phục là để annotaion @Transactional để nó rollback và đóng connection khi có Exception.
               
               
               
https://cafeit.info/posts/spring-boot/khai-quat-ve-spring-bean-scope
Scope Singleton
	Là khi các bean inject bean khác mà bean đó là singleton, thì bean đó chỉ đc khởi tạo 1 lần (khởi tạo là method đó sử dụng annotation @Bean)
		dù 2 service inject bean đó thì chỉ khởi tạo 1 lần
Scope Prototype	
	Là khi các bean inject bean khác mà bean đó là prototype, thì mỗi lần inject đều được khởi tạo lại (khởi tạo là method đó sử dụng annotation @Bean)
		dù 2 hay service inject bean là prototype thì nó đc khởi tạo 2 lần thành 2 object khác nhau
Scope Request
	Là khi 1 bean inject bean khác mà bean đó là request, thì mỗi lần gửi request HTTP là nó đi vào controller mà trong controller ấy có gọi 1 bean là HTTP request
		thì cứ mỗi lần request HTTP đó là mỗi lần khởi tạo 1 lần
Scope Session
	Là khi 1 bean inject bean khác mà bean đó là session, thì mỗi gọi bean đó thì lần đầu tiên nó sẽ khởi tạo bean có scope Session, 
		từ lần tiếp theo nó sẽ check session đó có bị hết hay không (cách test là cho timeout sesion) thì nó khởi tạo lại 1 lần mới của bean có scope session đó
	vd: add 2 config chỉ định session sẽ timeout:
			server.servlet.session.cookie.max-age=30
			server.servlet.session.timeout=30	
Scope Application 
	Application scope cũng giống như singleton-scope tuy nhiên có sự khác biệt quan trọng là scope của application-scope sẽ được shared giữa multipe servlet-based 
	running trên cùng một ServletContext trong khi singleton-scope thìchỉ dùng trong một application context.
Scope Global Session
	Một bean global session được định nghĩa cho global HTTP session và chỉ hợp lệ khi nó được đặt trong bối cảnh portlet container applications.
Scope WebSocket 
	WebSocket-scope bean được khởi tạo và lưu trữ tại WebSocket session attributes. Instance return là giống nhau khi có request từ WebSocket session
    
# ScopeConfiguration.java
	package com.demobyme.configuration;

	import com.demobyme.dto.Home;
	import org.springframework.context.annotation.Bean;
	import org.springframework.context.annotation.Configuration;
	import org.springframework.context.annotation.Scope;
	import org.springframework.context.annotation.ScopedProxyMode;
	import org.springframework.web.context.WebApplicationContext;

	@Configuration
	public class ScopeConfiguration {

		@Bean
		@Scope("singleton")
		public Home homeScopeSingleton() {
			System.out.println("homeScopeSingleton");

			Home home = new Home("5055 Schowalter Skyway North Gabrielleshire");
			return home;
		}

		@Bean
		@Scope("prototype")
		public Home homeScopePrototype() {
			System.out.println("homeScopePrototype");

			Home home = new Home("308 Leuschke Lakes Huelsview");
			return home;
		}

		@Bean
		@Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS)
		//@RequestScope
		public Home homeScopeRequest() {
			System.out.println("homeScopeRequest");

			Home home = new Home("0070 Lynch Camp Schaefershire, NY 19473");
			return home;
		}

		@Bean
		@Scope(value = WebApplicationContext.SCOPE_SESSION, proxyMode = ScopedProxyMode.TARGET_CLASS)
		//@RequestScope
		public Home homeScopeSession() {
			System.out.println("homeScopeSession");

			Home home = new Home("81241 Cole Pass Lake Heaven");
			return home;
		}

		@Bean
		@Scope(value = WebApplicationContext.SCOPE_APPLICATION, proxyMode = ScopedProxyMode.TARGET_CLASS)
		//@ApplicationScope
		public Home homeScopeApplication() {
			System.out.println("homeScopeApplication");

			Home home = new Home("90290 Bayer Square Vickieberg, MA 42093");
			return home;
		}

		@Bean
		@Scope(value = "globalSession", proxyMode = ScopedProxyMode.TARGET_CLASS)
		public Home homeScopeGlobalSession() {
			System.out.println("homeScopeGlobalSession");

			Home home = new Home("2579 Jackson Spurs Suite 900 Lake Louieside, VA 18537-1775");
			return home;
		}

		@Bean
		@Scope(scopeName = "websocket", proxyMode = ScopedProxyMode.TARGET_CLASS)
		public Home homeScopeWebsocket() {
			System.out.println("homeScopeWebsocket");

			Home home = new Home("3223 Anderson Street Apt. 040 Grayceside, TX 84265-4365");
			return home;
		}

	}
	
# HomeController.java
	package com.demobyme.controller;

	import com.demobyme.dto.Home;
	import com.demobyme.service.Home2Service;
	import com.demobyme.service.HomeService;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.beans.factory.annotation.Qualifier;
	import org.springframework.http.HttpStatus;
	import org.springframework.http.ResponseEntity;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestMethod;
	import org.springframework.web.bind.annotation.RestController;

	@RestController
	public class HomeController {

		@Autowired
		private HomeService homeService;

		@Autowired
		private Home2Service home2Service;

		@Autowired
		@Qualifier("homeScopeRequest")
		private Home homeScopeRequest;

		@Autowired
		@Qualifier("homeScopeSession")
		private Home homeScopeSession;

		@Autowired
		@Qualifier("homeScopeApplication")
		private Home homeScopeApplication;

		@RequestMapping(value = "/", method = RequestMethod.GET)
		public String home() {
			return "{\"status\": \"success\"}";
		}

		@RequestMapping(value = "/test-1-singleton", method = RequestMethod.GET)
		public String homeSingleton() {
			String result = "Singleton: " + homeService.getHomeSingleton().toString() + " | Prototype: " + homeService.getHomePrototype().toString();
			return result;
		}

		@RequestMapping(value = "/test-2-prototype", method = RequestMethod.GET)
		public String homePrototype() {
			String result = "Singleton: " + home2Service.getHomeSingleton().toString() + " | Prototype: " + home2Service.getHomePrototype().toString();
			return result;
		}

		@RequestMapping(value = "/test-3-request", method = RequestMethod.GET)
		public ResponseEntity homeRequest() {
			return new ResponseEntity<>("Prototype scope: " + homeScopeRequest.toString(), HttpStatus.OK);
		}

		@RequestMapping(value = "/test-4-session", method = RequestMethod.GET)
		public ResponseEntity sessionScope() {
			return new ResponseEntity<>("Session scope: " + homeScopeSession.toString(), HttpStatus.OK);
		}

		@RequestMapping(value = "/test-5-application", method = RequestMethod.GET)
		public ResponseEntity applicationScope() {
			String result = homeScopeApplication.toString() + "<br />";

			homeScopeApplication.setTotalFan(9999);
			homeScopeApplication.setTotalDoor(8888);
			homeScopeApplication.setAddress("995 Colten Radial Suite 397 Giuseppebury, OK 30279");

			result += homeScopeApplication.toString();

			return new ResponseEntity<>("Session application: <br />" + result, HttpStatus.OK);
		}

	}
	
# Home.java
	package com.demobyme.dto;

	import java.util.Random;

	public class Home {

		private int totalDoor;

		private int totalFan;

		private String address;

		public Home() {
			this.totalDoor = 0;
			this.totalFan = 0;
			this.address = "";
		}

		public Home(String address) {
			Random rand = new Random();
			this.totalDoor = rand.nextInt(10);
			this.totalFan = rand.nextInt(20);
			this.address = address;
		}

		public int getTotalDoor() {
			return totalDoor;
		}

		public void setTotalDoor(int totalDoor) {
			this.totalDoor = totalDoor;
		}

		public int getTotalFan() {
			return totalFan;
		}

		public void setTotalFan(int totalFan) {
			this.totalFan = totalFan;
		}

		public String getAddress() {
			return address;
		}

		public void setAddress(String address) {
			this.address = address;
		}

		@Override
		public String toString() {
			return "{\"door\": "+ totalDoor +", \"fan\": "+ totalFan +", \"address\": \""+ address +"\"}";
		}
	}
	
# Home2Service.java
	package com.demobyme.service;

	import com.demobyme.dto.Home;

	public interface Home2Service {

		Home getHomeSingleton();

		Home getHomePrototype();

	}
	
# Home2ServiceImpl.java
	package com.demobyme.service;

	import com.demobyme.dto.Home;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.beans.factory.annotation.Qualifier;
	import org.springframework.stereotype.Service;

	@Service
	public class Home2ServiceImpl implements Home2Service {

		@Autowired
		@Qualifier("homeScopeSingleton")
		private Home homeScopeSingleton;

		@Autowired
		@Qualifier("homeScopePrototype")
		private Home homeScopePrototype;


		@Override
		public Home getHomeSingleton() {
			return homeScopeSingleton;
		}

		@Override
		public Home getHomePrototype() {
			return homeScopePrototype;
		}

	}
	
# HomeService.java
	package com.demobyme.service;

	import com.demobyme.dto.Home;

	public interface HomeService {

		Home getHomeSingleton();

		Home getHomePrototype();

	}
	
# HomeServiceImpl.java
	package com.demobyme.service;

	import com.demobyme.dto.Home;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.beans.factory.annotation.Qualifier;
	import org.springframework.stereotype.Service;

	@Service
	public class HomeServiceImpl implements HomeService {

		@Autowired
		@Qualifier("homeScopeSingleton")
		private Home homeScopeSingleton;

		@Autowired
		@Qualifier("homeScopePrototype")
		private Home homeScopePrototype;


		@Override
		public Home getHomeSingleton() {
			return homeScopeSingleton;
		}

		@Override
		public Home getHomePrototype() {
			return homeScopePrototype;
		}

	}
	
# application.properties
	server.port=1234

	#sau 30s session sẽ timeout
	server.servlet.session.cookie.max-age=30
	server.servlet.session.timeout=30

    
